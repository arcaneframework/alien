name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CCACHE_BASEDIR: ${{github.workspace}}
  CCACHE_DIR: /ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_MAXSIZE: 400M
  BUILD_DIR: /tmp/build
  INSTALL_DIR: /tmp/install

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{matrix.config.name}}
    runs-on: ubuntu-latest
    container: ${{matrix.config.container}}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "ubuntu20.04 release",
            container: "arcaneframework/alien-base:ubuntu20.04",
            build_type: "RelWithDebInfo",
            build_options: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -G Ninja",
            alien_options: "-DALIEN_DEFAULT_OPTIONS:BOOL=ON",
          }
          - {
            name: "ubuntu20.04 debug",
            container: "arcaneframework/alien-base:ubuntu20.04",
            build_type: "Debug",
            build_options: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -G Ninja -DENABLE_SANITIZER_ADDRESS:BOOL=ON -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR:BOOL=ON",
            alien_options: "-DALIEN_DEFAULT_OPTIONS:BOOL=ON",
          }
          - {
            name: "ubuntu20.04 debug memory",
            container: "arcaneframework/alien-base:ubuntu20.04",
            build_type: "Debug",
            build_options: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -G Ninja -DENABLE_SANITIZER_MEMORY:BOOL=ON",
            alien_options: "-DALIEN_DEFAULT_OPTIONS:BOOL=ON",
          }
          - {
            name: "ubuntu20.04 debug minimal",
            container: "arcaneframework/alien-base:ubuntu20.04",
            build_type: "Debug",
            build_options: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -G Ninja",
            alien_options: "-DALIEN_DEFAULT_OPTIONS:BOOL=OFF -DALIENDEV_EMBEDDED=OFF -DCMAKE_PREFIX_PATH=\"/opt/arccon;/opt/arccore\"",
          }
          - {
            name: "rocky8  foss 2018b release",
            container: "ghcr.io/arcaneframework/rockylinux-foss-2018b-alien:8-latest",
            build_type: "RelWithDebInfo",
            build_options: "-DCMAKE_CXX_FLAGS='-L${EBROOTLIBXML2} -lxml2'",
            alien_options: "-DALIEN_DEFAULT_OPTIONS:BOOL=ON -DVerbose=ON -DBoost_NO_BOOST_CMAKE=ON -DBUILD_SHARED_LIBS=ON -DALIEN_USE_HDF5=ON",
          }
    steps:
      # Checkout v2 does not include files listed in .gitattributes
      - uses: actions/checkout@v1

      # Setting up ccache from github cached files
      - name: Prepare ccache timestamp
        id: ccache_timestamp
        shell: cmake -P {0}
        # Disabled for `act`
        if: ${{ !env.ACT }}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache files
        uses: actions/cache@v2
        # Disabled for `act`
        if: ${{ !env.ACT }}
        with:
          path: ${{env.CCACHE_DIR}}
          key: alien-ccache-${{matrix.config.name}}-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys: |
            alien-ccache-${{matrix.config.name}}

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `C MAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run:
          cmake -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} -DALIEN_PLUGIN_HYPRE:BOOL=ON -DALIEN_PLUGIN_PETSC:BOOL=ON ${{matrix.config.alien_options}} -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ${{matrix.config.build_options}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.config.build_type}} -j $(nproc)

#      - name: ccache status
#        run: ccache -s

      - name: Test
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # OMPI_ALLOW_RUN_AS_ROOT are set in script to allow `act` to work (env section was not working)
        # ASAN_OPTIONS=detect_leaks=0 to disable memory leak detection for now
        run: |
          cd ${{env.BUILD_DIR}}
          export OMPI_ALLOW_RUN_AS_ROOT=1
          export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
          export ASAN_OPTIONS=detect_leaks=0
          ctest -V -C ${{matrix.config.build_type}}

      - name: Install
        run: |
          cd ${{env.BUILD_DIR}} && cmake --install ${{env.BUILD_DIR}}
